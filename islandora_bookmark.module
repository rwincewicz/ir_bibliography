<?php

/**
 * 
 */
/**
 * Constants Permission/Menu/Theme
 */
define("PERM_ISLANDORA_BOOKMARK_CREATE", 'create ir bibliography');
define('MENU_ISLANDORA_BOOKMARK', 'islandora_bookmark');
define('MENU_ISLANDORA_BOOKMARK_ADD', 'islandora_bookmark_add');
define('MENU_ISLANDORA_BOOKMARK_EXPORT', 'islandora_bookmark_export');
define('MENU_ISLANDORA_BOOKMARK_CITATION', 'islandora_bookmark_citation');
define('MENU_ISLANDORA_BOOKMARK_CITATION_DISPLAY', 'islandora_bookmark_citation_display');

module_load_include('inc', 'fedora_repository', 'api/fedora_item');
module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
module_load_include('inc', 'ir_citation', 'ir_citation.api');
module_load_include('inc', 'ir_citation', 'ir_citation');
module_load_include('inc', 'islandora_fedora_api', 'islandora_fedora_api.object');
module_load_include('inc', 'islandora_fedora_api', 'islandora_fedora_api.repository');

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the onthisdate module
 */
function islandora_bookmark_perm() {
  return array(PERM_ISLANDORA_BOOKMARK_CREATE);
}

/**
 * The menu entries for this module.
 * @return $menu_entries
 *   An arrray of the items to be added to the drupal menu
 */
function islandora_bookmark_menu() {
  $items = array();
  $items[MENU_ISLANDORA_BOOKMARK] = array(
    'title' => t('Islandora Bookmark List'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_list_form'),
    'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  $items[MENU_ISLANDORA_BOOKMARK_ADD] = array(
    'title' => t('Islandora Bookmark Add'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_add_form'),
    'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  $items[MENU_ISLANDORA_BOOKMARK_EXPORT] = array(
    'title' => t('Islandora Bookmark Export'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_export_form'),
    'type' => MENU_CALLBACK, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  $items[MENU_ISLANDORA_BOOKMARK_CITATION] = array(
    'title' => t('Islandora Bookmark Citations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_citation_form'),
    'type' => MENU_CALLBACK, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  $items[MENU_ISLANDORA_BOOKMARK_CITATION_DISPLAY] = array(
    'title' => t('Islandora Bookmark Citations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_citation_display_form'),
    'type' => MENU_CALLBACK, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  $items['admin/settings/islandora_bookmark'] = array(
    'title' => t('Islandora bookmarks'),
    'description' => t('Administer the Islandora bookmarks module'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function islandora_bookmark_admin() {

  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => 'Citation styles',
  );

  $form['set']['islandora_bookmark_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Path',
    '#default_value' => variable_get('islandora_bookmark_path', 'var/www/drupal/sites/all/modules/ir_bibliography/csl'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * This function will display a link to the bookmark page
 *
 * @param 
 *
 * @todo
 *
 * @return drupal link function l()
 *
 */
//function islandora_bookmark_link() {
//  if (user_access(PERM_ISLANDORA_BOOKMARK_CREATE)) {
//    echo l('Your Bibliography', MENU_ISLANDORA_BOOKMARK);
//  }
//}

/**
 * This function will search and verify the pid isn't already associated with the drupal user or user session
 * 
 * @param string $pid, array $folder (id => folder_id, name => folder_name)
 * 
 * @todo
 *
 * @return TRUE if pid is found or FALSE if the pid isn't found
 *
 */
function islandora_bookmark_pid_folder_find($pid = NULL, $folder = NULL) {
  global $user;
  if (is_array($folder)) {
    $folder_id = $folder['id'];
    $folder_name = $folder['name'];
  }
  else {
    $folder_id = $folder; // Allows a simpler use of the function if only passing it a folder id
  }
  //$folder_name = $folder['name'];

  $pid_folder_find = FALSE; //default return = FALSE
  //search for existing pid
  if (!is_null($pid) && !is_null($folder_id)) {

    if ($user->uid) {
      //check db for existing pids
//      $query = "SELECT pid FROM {islandora_bookmark_pids} WHERE pid = '$pid' AND folder_id = '$folder_id' AND uid = '$user->uid';";
//      drupal_set_message(check_plain($query));
      $rs = db_query("SELECT pid FROM {islandora_bookmark_pids} WHERE pid = '%s' AND folder_id = '%d' AND uid = '%s';", $pid, $folder_id, $user->uid);
      $rsarray = db_fetch_array($rs);
      if (Fedora_item::fedora_item_exists($rsarray['pid'])) {
        $pid_folder_find = TRUE; //pid found
      }
    }
    else {
      //check in session for existing pids
      $pids = $_SESSION['islandora_bookmark_pids'];
      if (!is_array($pids)) {
        $pids = array();
      }
      //var_dump($pids) . "<BR><BR>";

      foreach ($pids as $pid_info) {
        $_pid = $pid_info['pid'];
        $created = $pid_info['created'];
        $_folder_id = $pid_info['folder_id'];
        //does pid of session array == pid passed via param?
        if ($_pid == $pid && $_folder_id == $folder_id) {
          $pid_folder_find = TRUE;
          break;
        }
      }
    }
  }
  //search for existing folder
  elseif (is_null($pid) && !is_null($folder_name)) {
//    $query = "SELECT folder_name FROM {islandora_bookmark_folders} WHERE folder_name = '$folder_name'";
    $rs = db_query("SELECT folder_name FROM {islandora_bookmark_folders} WHERE folder_name = '%s'", $folder_name);
    $rsarray = db_fetch_array($rs);
    if ($rsarray) {
      if (Fedora_item::fedora_item_exists($rsarray['pid'])) {
        $pid_folder_find = TRUE; //folder found
      }
    }
  }
  return $pid_folder_find;
}

/**
 * This function generates the list of bookmarked objects with table headings and options
 *  *
 * @todo
 *
 * @return array with form contents
 *  
 */
function islandora_bookmark_list_form() {
  global $user;
  $form = array();
  module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
  $pids = array();
  $options = array();
//  if (fedora_available() == FALSE) {
//    var_dump(fedora_available());
//    $form['message'] = array(
//      '#value' => t('Fedora is not available!'),
//    );
//    drupal_set_message(t('Fedora is not available!' , 'error'));
//    return $form;
//  }
  if ($user->uid) { //get pids assiocated with drupal user from drupal database
    islandora_bookmark_add(); //cross reference session w/ logged in drupal user
    //$query = "SELECT pid, created FROM {islandora_bookmark_pids} WHERE folder_id = $folder AND uid = $user->uid";
//    $query = "SELECT pid, created, folder_id FROM {islandora_bookmark_pids} WHERE uid = '$user->uid'";
    $rs = db_query("SELECT pid, created, folder_id FROM {islandora_bookmark_pids} WHERE uid = '%s'", $user->uid);
    if ($rs) {
      $i = 0;
      while ($data = db_fetch_object($rs)) {

        $pids[$i]['pid'] = $data->pid;
        $pids[$i]['created'] = $data->created;
        $pids[$i]['folder_id'] = $data->folder_id;
        $i++;
      }
    }
  }
  else {//get pids from session
    $pids = $_SESSION['islandora_bookmark_pids'];
  }
//  var_dump($pids);
  if (count($pids) > 0) {
    foreach ($pids as $i => $pid) {
      $created = $pid['created'];
      $folder_id = $pid['folder_id'];

      $pid = $pid['pid'];

      $item = new Fedora_Item($pid);

      $title = $item->objectProfile->objLabel;
      if (!is_null($title)) {//need to look into how to check to see if fedora is alive
        $title = l(stripslashes($title), 'fedora/repository/' . $pid, array('attributes' => array('target' => '_blank')));
      }
      else {
        $title = "Error getting title";
      }

      $author = $item->objectProfile->objLabel;
      if (!is_null($author)) {//need to look into how to check to see if fedora is alive
        $author = stripslashes($author);
      }
      else {
        $author = "Error getting author";
      }

      $form['table'][$i]['pid'] = array('#value' => stripslashes($pid));
      $form['table'][$i]['title'] = array('#value' => $title);
      $form['table'][$i]['author'] = array('#value' => $author);
      $options[$pid] = "";
      $form['table'][$i]['_pid'] = array('#value' => $pid);
      $form['table'][$i]['folder_id'] = array('#value' => $folder_id);
      $form['table'][$i]['created'] = array('#value' => format_date($created, $type = 'custom', $format = 'Y-m-d'));
    }
    //sort($form);
  }
  //drupal_set_message(print_r($pids));

  $form['#tree'] = TRUE;

  $form['folder_id'] = array(
    '#type' => 'hidden',
    '#value' => 1, //hard coded to show only pids in folder 1
  );

  $form['bookmark_check'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
  );

  $form['bookmark_action'] = array(
    '#type' => 'select',
    '#title' => t('With Checked'),
    '#options' => array(NULL => "Select...", "Remove", "Export"),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), MENU_ISLANDORA_BOOKMARK),
  );

  $form['#redirect'] = MENU_ISLANDORA_BOOKMARK;

  return $form;
}

/**
 * This function validates the submitted form to verify at least one pid was selected
 * @param array $form
 * @param array $form_state
 *
 * @todo
 *
 * @return
 */
function islandora_bookmark_list_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  $bookmark_check = $form_values['bookmark_check'];
  $pid_count = 0;
  foreach ($bookmark_check as $i => $value) {
    if ($bookmark_check[$i] > "") {
      $pid_count++;
    }
  }

  if ($pid_count == 0) {
    form_set_error('text', t('No bookmark(s) were selected'));
  }
}

/**
 * This function processes the submitted form. can remove or export objects from the user book mark list
 * @param string $form_id
 * @param array $form
 *
 * @todo
 *
 * @return
 */
function islandora_bookmark_list_form_submit($form_id, $form) {
  global $user;
  $form_values = $form['values'];
  $bookmark_check = $form_values['bookmark_check'];
  $bookmark_action = $form_values['bookmark_action'];
  $folder_id = $form_values['folder_id'];


  $selected_bookmarks = array();
  foreach ($bookmark_check as $key => $value) {
    if ($value) {
      $selected_bookmarks[] = $value;
    }
  }

  if (count($selected_bookmarks) > 0) {
    //if items are selected
    if ($bookmark_action == 0) {//code to remove bookmark from module
      islandora_bookmark_delete($selected_bookmarks, $folder_id);
    }
    elseif ($bookmark_action == 1) {

      $_SESSION['islandora_export_pids'] = $selected_bookmarks;

//      drupal_set_message(implode(' ', $selected_bookmarks));
      drupal_goto('islandora_bookmark_export');
      drupal_set_message(t('Bookmark(s) exported successfully.'));
    }
    else {
      drupal_set_message(t('No action defined for selected bookmarks(s).'), 'error');
    }
  }//if(count($selected_bookmarks) > 0)
  else {
    //if no items are selected fire a message
    drupal_set_message(t('No bookmark(s) were selected.'), 'error');
  }
}

/**
 * This function is required to have the bookmark table display properly
 * @param
 *
 * @todo
 *
 * @return form theme
 */
function islandora_bookmark_theme() {
  return array(
    'islandora_bookmark_list_form' => array(
      'arguments' => array(
        'form' => NULL),
    ),
  );
}

/**
 * This function themes and renders the drupal form
 *
 * @param array $form
 *
 * @todo
 *
 * 
 * @return drupal rendered form
 *
 */
function theme_islandora_bookmark_list_form($form) {
  $rows = array();
  if (isset($form['table'])) {
    foreach (element_children($form['table']) as $child) {
      $row_data = $form['table'][$child];
      $row = array();

      //$row[] = array('data' => drupal_render($row_data['pid']));

      $pid = $row_data['_pid']['#value'];
      $bookmark_check = $form['bookmark_check'][$pid];
      $bookmark_check = drupal_render($bookmark_check);

      $row[] = array('data' => $bookmark_check);

      $pid = $row_data['pid'];
      $row[] = array('data' => drupal_render($pid));

      $title = $row_data['title'];
      $row[] = array('data' => drupal_render($title));

      $author = $row_data['author'];
      $row[] = array('data' => drupal_render($author));

      $folder_id = $row_data['folder_id'];
      $row[] = array('data' => drupal_render($folder_id));

      $created = $row_data['created'];
      $row[] = array('data' => drupal_render($created));

      $rows[] = $row;
    }
  }
  // Individual table headers.

  $header = array();
  //theme('table_select_header_cell')"

  $header[] = theme('table_select_header_cell');
  $header[] = t('PID');
  $header[] = t('Title');
  $header[] = t('Author');
  $header[] = t('Folder ID');
  $header[] = t('Created');
//  $header[] = array('data' => drupal_render($form['bookmark_action']));


  $output = theme_table($header, $rows, $attributes = NULL);
  //$output .= drupal_render($form);
  $output .= drupal_render($form['bookmark_action']);
  $output .= drupal_render($form['submit']);
  $output .= drupal_render($form['cancel']);
  //hidden form properties
  $output .= drupal_render($form['form_build_id']);
  $output .= drupal_render($form['form_token']);
  $output .= drupal_render($form['form_id']);
  $output .= drupal_render($form['folder_id']);

  return $output;
}

/**
 * This function creates the form to manually bookmark a pid
 * 
 * @return type 
 */
function islandora_bookmark_add_form() {
  $form['add'] = array(
    '#type' => 'textfield',
    '#title' => t('Add pid'),
    '#size' => 20,
    '#maxlength' => 50,
  );

  $form['add_button'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

/**
 * Validation checks that a value has been entered and that the pid exists in fedora
 * @param type $form
 * @param type $form_state 
 */
function islandora_bookmark_add_form_validate($form, &$form_state) {
  $pid = explode(' ', $form_state['values']['add']);
  if ($pid != NULL) {
    if (count($pid) == 1) {
      $pid = implode('', $pid);
      if (Fedora_item::fedora_item_exists($pid)) {
        drupal_set_message($pid . ' exists in the repository');
      }
      else {
        form_set_error('text', $pid . t(' is not a valid pid!'));
      }
    }
    else {
      drupal_set_message(t('There is more than one pid'));
      foreach ($pid as $pids) {
        if (Fedora_item::fedora_item_exists($pids)) {
          drupal_set_message($pids . ' is an existing object!');
        }
        else {
          form_set_error('text', $pids . t(' does not exist!'));
        }
      }
    }
  }
  else {
    form_set_error('text', t('No pid was entered!'));
  }
}

/**
 * Submit function just calls the bookmark_add function and passes it the pid
 * @param type $form_id
 * @param type $form 
 */
function islandora_bookmark_add_form_submit($form, &$form_state) {
  $folder_id = '1'; // Hard coded folder_id at the moment until there's a mechanism for creating them sensibly
  $pid = explode(' ', $form_state['values']['add']);
  foreach ($pid as $pids) {
    islandora_bookmark_add($pids, $folder_id);
  }
}

/**
 * This function will add a pid to the drupal user or the anonymous user session
 * it will also cross reference the session pids to the drupal user pids if the current user w/session logs in
 *
 * @param string $pid
 * @param int $folder_id
 * @param boolean $set_msg - drupal set message, when cross referening session / drupal db
 *
 * @todo
 * add functionality to accept an array of pids so the function
 * doesnt need to be called for a large list of pids
 *
 * @return
 */
function islandora_bookmark_add($pid = NULL, $folder_id = '1', $set_msg = TRUE) {
  global $user;
  //cross refernce pids of session to pids of drupal user
  if (is_null($pid) && isset($_SESSION['islandora_bookmark_pids']) && $user->uid) {
    $pids = $_SESSION['islandora_bookmark_pids'];
    drupal_set_message('Bookmarks saved');
    foreach ($pids as $value) {
      $pid = $value['pid'];
      if (islandora_bookmark_pid_folder_find($pid, $folder_id) == FALSE) {
        //add any missing pids to db from session
        islandora_bookmark_add($pid, $folder_id, FALSE);
//        drupal_set_message(t('Folder ID: ' . $folder_id));
      }
      else {
        drupal_set_message(t('Item "@pid" is already bookmarked!', array('@pid' => $pid)), 'warning');
      }
    }
    //after all pids are moved from session, unset it so this wont be called again
    unset($_SESSION['islandora_bookmark_pids']);
  }
  //add to DB
  elseif (!is_null($pid)) {
    if (!is_array($pid)) {
      //add functionality to accept an array of pids so the function
      //doesnt need to be called for a large list of pids
    }
    if ($user->uid) {

      if (islandora_bookmark_pid_folder_find($pid, $folder_id) == FALSE) {
        $new_record = array(
          'uid' => $user->uid,
          'pid' => $pid,
          'folder_id' => $folder_id,
          'created' => time()
        );
        drupal_write_record('islandora_bookmark_pids', $new_record);
        if ($set_msg == TRUE) {
          drupal_set_message("Bookmark added successfully");
        }
      }
      else {
        drupal_set_message(t('Item "@pid" is already bookmarked!', array('@pid' => $pid)), 'warning');
      }
    }
    //code to add pid to session
    else {

      $pids = $_SESSION['islandora_bookmark_pids'];
      if (islandora_bookmark_pid_folder_find($pid, $folder_id) == FALSE) {
        $pid_info['pid'] = $pid;
        $pid_info['folder_id'] = $folder_id;
        $pid_info['created'] = time();

        $pids[] = $pid_info;
        $_SESSION['islandora_bookmark_pids'] = $pids;
        if ($set_msg == TRUE) {
          drupal_set_message("Bookmark added successfully");
        }
      }
      else {
        drupal_set_message(t('Item "@pid" is already bookmarked!', array('@pid' => $pid)), 'warning');
      }
      //unset ($_SESSION['islandora_bookmark_pids']);
    }
  }
}

/**
 * This function allows a user to delete a pid from a folder
 *
 * @param array $pids, int $folder_id
 *
 * @todo
 * use this function to replace the above code in the form_submit function
 * add in functionality to remove pid from session
 *
 *
 *
 * @return
 *
 */
function islandora_bookmark_delete($pids, $folder_id) {
  global $user;
  //delete from DB
  if ($user->uid) {
    $pid = implode('\' OR pid = \'', $pids);
    if (db_query("DELETE FROM {islandora_bookmark_pids} WHERE (pid = '%s') AND folder_id = '%d' AND uid = '%s';", $pid, $folder_id, $user->uid)) {

      drupal_set_message(t('Bookmark(s) removed successfully.'));
    }
    else {
      drupal_set_message(t('An error occurred!', 'error'));
    }
  }
  //delete from session
  else {
    $_pids = $_SESSION['islandora_bookmark_pids'];
    $tt = $_pids[1];
    $gg = $tt['folder_id'];

    foreach ($pids as $value) {

      $remove_key = recursiveArraySearch($_pids, $value);
      $_key = $_pids[$remove_key];
      $_folder_id = $_key['folder_id'];
      if ($_folder_id == $folder_id) {
        unset($_pids[$remove_key]);
      }
    }

    $_SESSION['islandora_bookmark_pids'] = array_values($_pids);
    drupal_set_message(t('Bookmark(s) removed successfully.'));
  }
}

/**
 * This function adds a folder
 *
 * @param $folder_name
 *
 * @todo Add ability to add folder as a number as well. 
 *
 *
 *
 * @return
 *
 */
function islandora_bookmark_folder_add($folder_name) {
  if (islandora_bookmark_pid_folder_find(NULL, array('name' => $folder_name)) == FALSE) {
    $record = array(
      'folder_name' => $folder_name,
      'created' => time()
    );
    drupal_write_record('islandora_bookmark_folders', $record);
    drupal_set_message('ttt');
  }
}

/**
 * This function deletes a folder
 *
 * @param array $folder (id => folder_id, name => folder_name)
 *
 * @todo
 *
 *
 * @return
 *
 */
function islandora_bookmark_folder_delete($folder) {
  if (is_array($folder)) {
    $folder_id = $folder['id'];
    $folder_name = $folder['name'];
    if (!$folder_id) {
      db_query("DELETE FROM {islandora_bookmark_folders} WHERE folder_id = '%s'", $folder_id);
      drupal_set_message('Folder deleted successfully');
    }
    elseif (!$folder_name) {
      db_query("DELETE FROM {islandora_bookmark_folders} WHERE folder_name = '%s'", $folder_name);
      drupal_set_message('Folder deleted successfully');
    }
  }
}

/**
 * This form lists the options available for the listed pids
 * @param type $form
 * @return string 
 * @todo Have this as a basic form and allow the output submodules to
 * add options using hook_form_alter
 */
function islandora_bookmark_export_form($form) {
  $form = array();
//  Save the list of pids in the session so that they persist between forms
  $pids = $_SESSION['islandora_export_pids'];

  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Export bookmarks'),
  );

  $form['set']['pids'] = array(
    '#value' => t('PIDs selected: ') . implode(', ', $pids),
  );

  $form['set']['options'] = array(
    '#type' => 'radios',
    '#title' => t('Export options'),
    '#default_value' => 0,
    '#options' => array(t('List of PIDs - text'), t('List of PIDs - XML'), t('Citations'), t('Plain text'), t('Binaries')),
  );

  $form['pids'] = array(
    '#type' => 'value',
    '#value' => $pids,
  );

  $form['export'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );

  return $form;
}

function islandora_bookmark_export_form_validate($form, &$form_state) {
  if ($form_state['values']['pids'] == NULL) {
//    Check that there are pids listed as this page could be accessed directly with its URL
    form_set_error('text', t('No pids selected!'));
  }
}

/**
 * Submit function for the bookmark export form
 * @param type $form
 * @param type $form_state 
 * @todo Allow the files to be downloaded, maybe as a zip archive
 */
function islandora_bookmark_export_form_submit($form, &$form_state) {
  drupal_set_message();

  $pids = $form_state['values']['pids'];

  switch ($form_state['values']['options']) {
    case 0:
//      Present the list of pids as a text file for download
      $filename = 'pids.txt';

      header('Content-Type', 'text/plain');
      header('Content-Disposition: attachment; filename=' . $filename . ';');

      foreach ($pids as $pid) {
        print($pid);
        print("\n");
      }

      exit;
      break;

    case 1:
//      Present the list of pids as XML for download
      drupal_set_message(t('List of PIDs - XML'));
      $filename = 'pids.xml';

      header('Content-Type', 'text/xml');
      header('Content-Disposition: attachment; filename=' . $filename . ';');

      foreach ($pids as $pid) {

        $object = new Fedora_Item($pid);
        $xml = $object->get_datastreams_list_as_SimpleXML();
        print($xml->asXML());
        exit;
      }
      break;

    case 2:
//      Redirect to citation forms to export bibliography
      drupal_goto('islandora_bookmark_citation');
      break;

    case 3:
      drupal_set_message(t('Export plain text'));
      $object = new FedoraRepository();
      $output = $object->fedoraWorking();
      drupal_set_message($output);
      break;

    case 4:
      drupal_set_message(t('Export binaries'));

      foreach ($pids as $pid) {

        $object = new Fedora_Item($pid);
        $dsarray = $object->get_datastreams_list_as_array();
        foreach ($dsarray as $dselement) {
//          $ds = $object->get_mimetype_of_datastream($dselement);
          $dselement_string = implode(', ', $dselement);
          drupal_set_message(t("@dselement_string", array('@dselement_string' => $dselement_string)));
//          var_dump($dselement);
        }
//        drupal_set_message(implode(', ', $dsarray['OBJ']));
//        var_dump($dsarray);
      }
      break;
  }
}

/**
 * This is the form that lists all of the installed CSL files and allows one to be 
 * chosen to create the citations
 * @param type $form
 * @return type 
 */
function islandora_bookmark_citation_form($form) {

  $pids = $_SESSION['islandora_export_pids'];
//  Get the path to the csl files from the variable table
  $dir = variable_get('islandora_bookmark_path', 'var/www/drupal/sites/all/modules/ir_bibliography/csl');
//  List the files from the directory, removing those that don't end in .csl
  $files = scandir($dir);

  $csl_files = array_filter($files, 'islandora_bookmark_filter_array');
//  Edit the array to include both the csl title and filename
  $csl_array = array_map('islandora_bookmark_csl_name', $csl_files);
//  Run through the array and check that each object has a MODS datastream.
//  If it doesn't pull it out of the array. 
  foreach ($pids as $key => $pid) {
    $object = new Fedora_Item($pid);
    $ds = $object->get_datastreams_list_as_array();
    if (array_key_exists("MODS", $ds) == FALSE) {
      unset($pids[$key]);
      drupal_set_message($pid . t(' does not have a MODS datastream!'), 'warning');
    }
  }
//  If there are no objects with MODS datastreams then report an error
  if (count($pids) < 1) {
    drupal_set_message(t('None of the pids selected have MODS datastreams!'), 'error');
    return $form;
  }
//  Export the new list of pids to the session
  $_SESSION['islandora_export_pids'] = $pids;

  foreach ($csl_array as $title) {
    $csl_titles[$title['filename']] = $title['title'];
  }

  $form = array();

  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Citations'),
  );

  $form['set']['pids'] = array(
    '#value' => t('PIDs selected: ') . implode(', ', $pids) . '</BR>',
  );

  if ($csl_files != NULL) {

    $form['set']['csl'] = array(
      '#type' => 'radios',
      '#title' => t('Citation style'),
      '#default_value' => 'bibtex.csl',
      '#options' => $csl_titles,
    );
  }
  else {
    $form['set']['csl'] = array(
      '#value' => t('No citation styles found!'),
    );
  }

  $form['pids'] = array(
    '#type' => 'value',
    '#value' => $pids,
  );

  $form['export'] = array(
    '#type' => 'submit',
    '#value' => t('Create citations'),
  );

  return $form;
}

function islandora_bookmark_citation_form_validate($form, &$form_state) {
  
}

function islandora_bookmark_citation_form_submit($form, &$form_state) {

  $csl = $form_state['values']['csl'];

  $_SESSION['islandora_citation_csl'] = $csl;

  drupal_goto('islandora_bookmark_citation_display');
}

/**
 * Form to display the output from the citation API and display it
 * @return string 
 * @todo Add validate function to check that the pids and csl file exist
 */
function islandora_bookmark_citation_display_form() {

  $pids = $_SESSION['islandora_export_pids'];

  $csl = $_SESSION['islandora_citation_csl'];

  $csl_file = file_get_contents('/var/www/drupal/sites/all/modules/ir_bibliography/csl/' . $csl);

  if ($csl_file == FALSE) {
    drupal_set_message(t('CSL load failed!'), 'warning');
  }

  $citation = new IslandoraCitationAPI();

  $citation->loadCiteprocJavascript();

  $citation->addENUS();

  $html = $citation->getCitationHTMLFromPIDAndCSL($csl_file, $pids);

  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Citations'),
  );

  $form['set']['html'] = array(
    '#value' => $html,
  );

  $form['options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Options'),
    '#options' => array(
      'print' => t('Print'),
      'email' => t('Email'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

function islandora_bookmark_citation_display_form_validate($form, &$form_state) {
  
}

function islandora_bookmark_citation_display_form_submit($form, &$form_state) {
  
}

/**
 * Allows searching for a value in a multidimensional array
 * @param type $haystack
 * @param type $needle
 * @param type $index
 * @return type 
 * Returns the key for the value
 */
function recursiveArraySearch($haystack, $needle, $index = NULL) {
  $aIt = new RecursiveArrayIterator($haystack);
  $it = new RecursiveIteratorIterator($aIt);
  while ($it->valid()) {
    if (((isset($index) AND ($it->key() == $index)) OR (!isset($index))) AND ($it->current() == $needle)) {
      return $aIt->key();
    }
    $it->next();
  }
  return FALSE;
}

/**
 * This function is used to check the files array to see if the file has a .csl extension.
 * @param type $var - filename to be checked
 * @return type boolean - return TRUE if the extension is .csl, FALSE if it isn't
 */
function islandora_bookmark_filter_array($var) {
  if (preg_match('/.\.csl$/', $var)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * This function takes the CSL and extracts the title returning both the filename and title as an array
 * @param type $item - This is the filename of the CSL file
 * @return type array - Array has the filename as the first element and the title of the CSL as the second
 */
function islandora_bookmark_csl_name($item) {
  $file = new DOMDocument();
  $file->load(variable_get('islandora_bookmark_path', '/var/www/drupal/sites/all/modules/ir_bibliography') . '/' . $item);
  $title = $file->getElementsByTagName('title');
  if ($title->item(0)->nodeValue != NULL) {
    $array = array(
      'filename' => $item,
      'title' => $title->item(0)->nodeValue,
    );
  }
  else {
    $array = array(
      'filename' => $item,
      'title' => t('<strong>No title found!</strong>'),
    );
  }
  return $array;
}

function islandora_bookmark_check_fedora() {
  
}