<?php

/**
 * 
 */


/**
 * Constants Permission/Menu/Theme
 */
define("PERM_ISLANDORA_BOOKMARK_CREATE", 'create ir bibliography');
define('MENU_ISLANDORA_BOOKMARK', 'islandora_bookmark');

module_load_include('module', 'scholar');

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function islandora_bookmark_perm() {
  return array(PERM_ISLANDORA_BOOKMARK_CREATE);
  

}

/**
 * The menu entries for this module.
 * @return $menu_entries
 *   An arrray of the items to be added to the drupal menu
 */
function islandora_bookmark_menu() {
  $items = array();
  $items[MENU_ISLANDORA_BOOKMARK] = array(
    'title' => t('Islandora Bookmarks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_bookmark_list_form'),
    'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
    'access arguments' => array(PERM_ISLANDORA_BOOKMARK_CREATE),
  );

  return $items;
}



/**
 * This function will display a link to the bookmark page
 *
 * @param 
 *
 * @todo
 *
 * @return drupal link function l()
 *
 */
function islandora_bookmark_link() {
    if(user_access(PERM_ISLANDORA_BOOKMARK_CREATE)) {
        echo l('Your Bibliography',MENU_ISLANDORA_BOOKMARK);
    }
}


/**
 * This function will search and verify the pid isn't already assiocated with the drupal user or user session
 * 
 * @param string $pid, array $folder (id => folder_id, name => folder_name)
 * 
 * @todo
 *
 * @return TRUE if pid is found or FALSE if the pid isn't found
 *
 */
function islandora_bookmark_pid_folder_find($pid = NULL, $folder = NULL) {
    global $user;
    if(is_array($folder)) {
        $folder_id = $folder['id'];
        $folder_name = $folder['name'];
    }
    //$folder_name = $folder['name'];

    $pid_folder_find = FALSE; //default return = FALSE
    //search for existing pid
    if(!is_null($pid) && !is_null($folder_id)) {
        
        if($user->uid) {
            //check db forexisting pids
            $query = "SELECT pid FROM {islandora_bookmark_pids} WHERE pid = '$pid' AND folder_id = $folder_id AND uid = $user->uid;";
            $rs = db_query($query);
            if(db_result($rs)) {
                $pid_folder_find = TRUE; //pid found
            }
        }
        else {
            //check in session for existing pids
            $pids = $_SESSION['islandora_bookmark_pids'];
            if(!is_array($pids)) {
                $pids = array();
            }
            //var_dump($pids) . "<BR><BR>";

            foreach($pids as $i => $pid_info) {
                $_pid = $pid_info['pid'];
                $created = $pid_info['created'];
                $_folder_id = $pid_info['folder_id'];
                //does pid of session array == pid passed via param?
                if($_pid == $pid && $_folder_id == $folder_id) {
                    $pid_folder_find = TRUE;
                    break;
                }
            }
        }
    }
    //search for existing folder
    elseif(is_null($pid) && !is_null($folder_name)) {
        $query = "SELECT folder_name FROM {islandora_bookmark_folders} WHERE folder_name = '$folder_name'";
        $rs = db_query($query);
        if(db_result($rs)) {
            $pid_folder_find = TRUE; //folder found
        }
    }
    return $pid_folder_find;
}

/**
 * This function will add a pid to the drupal user or the anonymous user session
 * it will also cross reference the session pids to the drupal user pids if the current user w/session logs in
 *
 * @param string $pid
 * @param boolean $set_msg - drupal set message, when cross referening session / drupal db
 *
 * @todo
 * add functionality to accept an array of pids so the function
 * doesnt need to be called for a large list of pids
 * 
 * @return 
 */
function islandora_bookmark_add($pid = NULL, $folder_name = NULL, $set_msg = TRUE) {
    global $user;
    if(is_null($pid) && isset($_SESSION['islandora_bookmark_pids']) && $user->uid) {
        //cross refernce pids of session to pids of drupal user
        $pids = $_SESSION['islandora_bookmark_pids'];
        drupal_set_message('cross reference');
        foreach($pids as $key => $value) {
            if(islandora_bookmark_pid_folder_find($value, $folder_name) == FALSE) {
                //add any missing pids to db from session
                islandora_bookmark_add($value, $folder_name, FALSE);
            }
        }
        //after all pids are moved from session, unset it so this wont be called again
        unset($_SESSION['islandora_bookmark_pids']);
    }   
    
    elseif(!is_null($pid)) {
        if(!is_array($pid)) {
            //add functionality to accept an array of pids so the function
            //doesnt need to be called for a large list of pids
        }
        if($user->uid) {
            
            if(islandora_bookmark_pid_folder_find($pid, $folder) == FALSE) {
                $new_record = array(
                    'uid' => $user->uid,
                    'pid' => $pid,
                    'folder_id' => $folder,
                    'created' => time()
                );
                drupal_write_record('islandora_bookmark_pids', $new_record);
                if ($set_msg == TRUE) {
                    drupal_set_message("Bookmark added successfully");
                }
            }
            
        }
        else {
            //code to add pid to session
            $pids = $_SESSION['islandora_bookmark_pids'];
            if(islandora_bookmark_pid_folder_find($pid) == FALSE) {
                $pid_info['pid'] = $pid;
                $pid_info['folder'] = $folder;
                $pid_info['created'] = time();

                 $pids[] = $pid_info;
                $_SESSION['islandora_bookmark_pids'] = $pids;
                if ($set_msg == TRUE) {
                    drupal_set_message("Bookmark added successfully");
                }
                
            }
           //unset ($_SESSION['islandora_bookmark_pids']);
        }
    }
}


/**
 * This function generates the list of bookmarked objects with table headings and options
 *  *
 * @todo
 *
 * @return array with form contents
 *  
 */
function islandora_bookmark_list_form() {
    global $user;
    module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
    //islandora_bookmark_add('demo'. rand());
    //islandora_bookmark_add(array('ff','fffffff','fffffdfdf', 'dfsdfsdsdf'));
    islandora_bookmark_add('demo162756190445',1);
    islandora_bookmark_add('demo162756190445'.rand(),1);
    //islandora_bookmark_folder_delete('Favorites');
    islandora_bookmark_folder_add('Favorites');

    
   
    
    $pids = array();
    $options = array();
    if($user->uid){ //get pids assiocated with druapl user from drupal database
        islandora_bookmark_add(); //cross reference session w/ logged in drupal user
        //$query = "SELECT pid, created FROM {islandora_bookmark_pids} WHERE folder_id = $folder AND uid = $user->uid";
        $query = "SELECT pid, created FROM {islandora_bookmark_pids} WHERE uid = $user->uid";
        $rs = db_query($query);
        if ($rs) {
            $i=0;
            while ($data = db_fetch_object($rs)) {

                $pids[$i]['pid'] = $data->pid;
                $pids[$i]['created'] = $data->created;
                $pids[$i]['folder'] = $data->folder_id;
                $i++;
            }
	}
    }
    else{//get pids from session
        $pids = $_SESSION['islandora_bookmark_pids'];
    }    
   // var_dump($pids);
    if (count($pids) > 0) {
        foreach($pids as $i => $pid) {
            $created = $pid['created'];
            $folder = $pid['folder'];
            
            $pid = $pid['pid'];
            
            $item = new Fedora_Item($pid);
            
            $title = $item->objectProfile->objLabel;
            if (!is_null($title)) {//need to look into how to check to see if fedora is alive
                $title = l(stripslashes($title),'fedora/repository/'.$pid, array('attributes' => array('target' => '_blank')));
            }
            else {
                $title = "Error getting title";
            }


            $author = $item->objectProfile->objLabel;
            if (!is_null($author)) {//need to look into how to check to see if fedora is alive
                $author = stripslashes($author);
            }
            else {
                $author = "Error getting author";
            }
            
            $form['table'][$i]['pid'] = array('#value' => stripslashes($pid));
            $form['table'][$i]['title'] = array('#value' => $title);
            $form['table'][$i]['author'] = array('#value' => $author);
            $options[$pid] = "";
            $form['table'][$i]['_pid'] = array('#value' => $pid);
            $form['table'][$i]['created'] = array('#value' => format_date($created, $type = 'custom', $format = 'Y-m-d'));   
        }
        //sort($form);
    }
    //drupal_set_message(print_r($pids));
    

    $form['#tree'] == TRUE;

    $form['bookmark_check'] = array(
        '#type' => 'checkboxes',
        '#options' => $options,
    );

    $form['bookmark_action'] = array(
        '#type' => 'select',
        '#title' => t('With Checked'),
        '#options' => array(NULL => "Select...", "Remove","Export"),
        '#required' => TRUE,
    ); //$form['bookmark_action'] = array

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    $form['cancel'] = array(
        '#type' => 'markup',
        '#value' => l(t('Cancel'), MENU_ISLANDORA_BOOKMARK),
    );

    $form['#redirect'] = MENU_ISLANDORA_BOOKMARK;

    return $form;
}

/**
 * This function validates the submitted form to verify at least one pid was selected
 * @param array $form
 * @param array $form_state
 *
 * @todo
 *
 * @return
 */
function islandora_bookmark_list_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  $bookmark_check = $form_values['bookmark_check'];
  $pid_count = 0;
  foreach($bookmark_check as $i => $value) {
      if($bookmark_check[$i] > "") {
          $pid_count++;
      }
  }
  
  if($pid_count == 0) {
    form_set_error('text', t('No bookmark(s) were selected'));
  }
}



/**
 * This function processes the submitted form. can remove or export objects from the user book mark list
 * @param string $form_id
 * @param array $form
 *
 * @todo
 *
 * @return
 */

function islandora_bookmark_list_form_submit($form_id, $form) {
    global $user;
    $form_values = $form['values'];
    $bookmark_check = $form_values['bookmark_check'];
    $bookmark_action = $form_values['bookmark_action'];


    $selected_bookmarks = array();
    foreach($bookmark_check as $key => $value) {
            if ($value) {
                $selected_bookmarks[] = $value;
            }
    }

    if(count($selected_bookmarks) > 0) {
        //if items are selected
        if ($bookmark_action == 0) {//code to remove bookmark from module
            if($user->uid){
                foreach($selected_bookmarks as $key => $value) {
                    $selected_bookmarks[$key] = "'$value'";
                }
                $value_string = @implode(' OR pid = ', $selected_bookmarks);
                $query = "DELETE FROM {islandora_bookmark_pids} WHERE (pid = $value_string) AND uid = $user->uid;";
                db_query($query);
                //drupal_set_message($query);
                drupal_set_message(t('Bookmark(s) removed successfully.'));
            }
            else {
            //code to delete saved citations from session (anonymous user)
            $pids = $_SESSION['islandora_bookmark_pids'];
            foreach($selected_bookmarks as $key => $value) {
                //drupal_set_message("value".$value);
                $remove_key = array_search($value, $pids);
                unset($pids[$remove_key]);

            }

            $_SESSION['islandora_bookmark_pids'] = array_values($pids);
            drupal_set_message(t('Bookmark(s) removed successfully.'));
        }
            }
        elseif($bookmark_action == 1) { //code to export bookmarks
            if($user->uid){
                //code to export from DB
            }
            else {
                //code to export from session
            }
            //code to export bookmarks
            drupal_set_message(t('Bookmark(s) exported successfully.'));
        }
        else {
            drupal_set_message(t('No action defined for selected bookmarks(s).'),'error');
        }
    }//if(count($selected_bookmarks) > 0)
    else {
        //if no items are selected fire a message
        drupal_set_message(t('No bookmark(s) were selected.'),'error');
    }
    
}



/**
 * This function......
 * @param
 *
 * @todo
 *
 * @return form theme
 */

function islandora_bookmark_theme() {
    return array(
        'islandora_bookmark_list_form' => array('arguments' => array('form' => NULL),),
    );
}


/**
 * This function themes and renders the drupal form
 *
 * @param array $form
 *
 * @todo
 *
 * 
 * @return drupal rendered form
 *
 */
function theme_islandora_bookmark_list_form($form) {
    $rows = array();
	
    foreach(element_children($form['table']) as $child) {
        $row_data = $form['table'][$child];
        $row = array();
	
            //$row[] = array('data' => drupal_render($row_data['pid']));
            
            $pid = $row_data['pid'];
            $row[] = array('data' => drupal_render($pid));

            $title = $row_data['title'];
            $row[] = array('data' => drupal_render($title));

            $author = $row_data['author'];
            $row[] = array('data' => drupal_render($author));

            $created = $row_data['created'];
            $row[] = array('data' => drupal_render($created));

            $pid = $row_data['_pid']['#value'];
            $bookmark_check = $form['bookmark_check'][$pid];
            $bookmark_check = drupal_render($bookmark_check);
            
            $row[] = array('data' => $bookmark_check);
                      
            $rows[] = $row;
           
	
    }
	// Individual table headers.

	$header = array();
	//theme('table_select_header_cell')"
        
	$header[] = t('PID');
	$header[] = t('Title');
	$header[] = t('Author');
        $header[] = array('data' => drupal_render($form['bookmark_action']));
        $header[] = theme('table_select_header_cell');

	
        $output = theme_table($header, $rows, $attributes = NULL);
	//$output .= drupal_render($form);
       $output .= drupal_render($form['submit']);
       $output .= drupal_render($form['cancel']);
       //hidden form properties
       $output .= drupal_render($form['form_build_id']);
       $output .= drupal_render($form['form_token']);
       $output .= drupal_render($form['form_id']);
       
	return $output;
}


/**
 * This function allows a user to delete a pid from a folder
 *
 * @param $pid, $folder_id
 *
 * @todo
 *
 *
 * @return
 *
 */

function islandora_bookmark_delete($pid, $folder_id) {
    $query = "DELETE FROM {islandora_bookmark_pids} WHERE pid = $pid AND folder_id = $folder_id";
    db_query($query);
}


/**
 * This function adds a folder
 *
 * @param $folder_name
 *
 * @todo
 *
 *
 * @return
 *
 */

function islandora_bookmark_folder_add($folder_name) {
    if(islandora_bookmark_pid_folder_find(NULL, array('name' => $folder_name)) == FALSE) {
         $record = array(
            'folder_name' => $folder_name,
            'created' => time()
        );
        drupal_write_record('islandora_bookmark_folders', $record);
        drupal_set_message('ttt');
    }
}

/**
 * This function deletes a folder
 *
 * @param $folder
 *
 * @todo
 *
 *
 * @return
 *
 */

function islandora_bookmark_folder_delete($folder_name) {

    $query = "DELETE FROM {islandora_bookmark_folders} WHERE folder_name = '$folder_name'";
    db_query($query);

}