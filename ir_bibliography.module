<?php

/**
 * 
 */


/**
 * Constants Permission/Menu/Theme
 */
define("PERM_IR_BIBLIOGRAPHY_CREATE", 'create ir bibliography');

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function ir_bibliography_perm() {
  return array(PERM_IR_BIBLIOGRAPHY_CREATE);
  

}

/**
 * The menu entries for this module.
 * @return $menu_entries
 *   An arrray of the items to be added to the drupal menu
 */
function ir_bibliography_menu() {
  $items = array();
  $items['ir_bibliography'] = array(
    'title' => t('IR Bibliography'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ir_bibliography_form'),
    'type' => MENU_NORMAL_ITEM, //MENU_CALLBACK,
    'access arguments' => array(PERM_IR_BIBLIOGRAPHY_CREATE),
  );

  $items['ir_bibliography/add'] = array(
    'title' => t('IR Bibliography'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ir_bibliography_add'),
    'type' => MENU_CALLBACK,
    'access arguments' => array(PERM_IR_BIBLIOGRAPHY_CREATE),
  );
  return $items;
}
/**
 * This function will add a pid to the drupal user or the anonymous user session
 * it will also cross reference the session pids to the drupal user pids if the current user w/session logs in
 * @return echo
 *
 * @todo
 * finish cross referensing
 * conditional insert statement
 * 
 */

function ir_bibliography_add($pid = NULL, $button = FALSE) {
    global $user;
    if(is_null($pid) && isset($_SESSION['ir_bibliography_pids']) && $user->uid) {
        //cross refernce pids of session to pids of drupal user
        $pids = $_SESSION['ir_bibliography_pids'];
        foreach($pids as $key => $value) {
            $query = "SELECT pid FROM {ir_bibliography} WHERE pid = '$value' AND uid = $user->uid;";
            //drupal_set_message($query);
            //add any missing pids to db from session
        }
    }   
    
    elseif(!is_null($pid)) {
        if ($button == FALSE) {
            if($user->uid) {
                //code to add pid to db
                $query = "INSERT INTO {ir_bibliography} (uid, pid) VALUES ($user->uid, '$pid');";
                db_query($query);
                drupal_set_message('cross reference');
            }
            else {
                //code to add pid to session
                $pids = $_SESSION['ir_bibliography_pids'];
                if(is_null(array_search($pid, $pids))) {//check to see if pid is already in session
                    $pids[] = $pid;
                }
                //add pid to session
                $_SESSION['ir_bibliography_pids'] = $pids;
                //drupal_set_message("test".array_search($pid, $pids));
            }
            drupal_set_message("Citation added successfully to bibliography");
        }
        else {
            //check first to see if the pid is already in db or session before they can add it again
            echo l("Add $pid to bibliography","http://google.ca");
        }
        //add pid to session or drupal user
        //drupal_set_message('pid is NOT  null '.$pid);

    }
}

/**
 * This function generates the list of selected citations with table headings and options
 * @return array with form contents
 *
 * @todo
 *  build in functionality if anonymous user logs in, their session pids will be assiocated
 *  with their drupal account automatically
 */
function ir_bibliography_form() {
    global $user;
    module_load_include('inc', 'Fedora_Repository', 'api/fedora_item');
    ir_bibliography_add();
    ir_bibliography_add('gg',TRUE);
    ir_bibliography_add("demo: " .rand());
    $pids = array();
    $options = array();
    if($user->uid){ //get pids assiocated with druapl user from drupal database
        ir_bibliography_add(); //cross reference session logged in drupal user
        $query = "SELECT pid FROM {ir_bibliography} WHERE uid = $user->uid";
        $rs = db_query($query); 
        if ($rs) {
            while ($data = db_fetch_object($rs)) {
                $pids[] = $data->pid;
            }
	}
    }
    else{//get pids from session
        //unset($_SESSION['ir_bibliography_pids']);
        //$_SESSION['ir_bibliography_pids'] = array('islandora:225', 'demo:5','demo:6');
        
        $pids = $_SESSION['ir_bibliography_pids'];
    }    
    
    if (count($pids) > 0) {
        foreach($pids as $i => $pid) {
            
            $item = new Fedora_Item($pid);
            
            $title = $item->objectProfile->objLabel;
            if (!is_null($title)) {//need to look into how to check to see if fedora is alive
                $title = l(stripslashes($title),'fedora/repository/'.$pid, array('attributes' => array('target' => '_blank')));
            }
            else {
                $title = "Error getting title";
            }


            $author = $item->objectProfile->objLabel;
            if (!is_null($author)) {//need to look into how to check to see if fedora is alive
                $author = stripslashes($author);
            }
            else {
                $author = "Error getting author";
            }
            
            $form['table'][$i]['pid'] = array('#value' => stripslashes($pid));
            $form['table'][$i]['title'] = array('#value' => $title);
            $form['table'][$i]['author'] = array('#value' => $author);
            //$status[$key] = "";
            //$form[$key] = $data->pid;
            $options[$pid] = "";
            $form['table'][$i]['_pid'] = array('#value' => $pid);
            

         
        }
        //sort($form);
    }
    //drupal_set_message(print_r($pids));
    

    $form['#tree'] == TRUE;

    $form['citation_check'] = array(
        '#type' => 'checkboxes',
        '#options' => $options,
    );

    $form['citation_action'] = array(
        '#type' => 'select',
        '#title' => t('With Checked'),
        '#options' => array(NULL => "Select...", "Remove","Export"),
        '#required' => TRUE,
    ); //$form['citation_action'] = array

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    $form['cancel'] = array(
        '#type' => 'markup',
        '#value' => l(t('Cancel'), 'ir_bibliography'),
    );

    $form['#redirect'] = 'ir_bibliography';

    return $form;
}

/**
 * This function validates the submitted form to verify at least one pid was selected
 *
 */
function ir_bibliography_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  $citation_check = $form_values['citation_check'];
  $pid_count = 0;
  foreach($citation_check as $i => $value) {
      if($citation_check[$i] > "") {
          $pid_count++;
      }
  }
  
  if($pid_count == 0) {
    form_set_error('text', t('No citation(s) were selected'));
  }
}



/**
 * This function processes the submitted form. can remove or export citations from user bibliography
 *
 */

function ir_bibliography_form_submit($form_id, $form) {
    global $user;
    $form_values = $form['values'];
    $citation_check = $form_values['citation_check'];
    $citation_action = $form_values['citation_action'];


    $selected_citations = array();
    foreach($citation_check as $key => $value) {
            if ($value) {
                $selected_citations[] = $value;
            }
    }

    if(count($selected_citations) > 0) {
        //if items are selected
        if ($citation_action == 0) {//code to remove citations from bibliography
            if($user->uid){
                foreach($selected_citations as $key => $value) {
                    $selected_citations[$key] = "'$value'";
                }
                $value_string = @implode(' OR pid = ', $selected_citations);
                $query = "DELETE FROM {ir_bibliography} WHERE (pid = $value_string) AND uid = $user->uid;";
                db_query($query);
                drupal_set_message($query);
            }
            else {
            //code to delete saved citations from session (anonymous user)
            $pids = $_SESSION['ir_bibliography_pids'];
            foreach($selected_citations as $key => $value) {
                drupal_set_message("value".$value);
                $remove_key = array_search($value, $pids);
                unset($pids[$remove_key]);

            }

            $_SESSION['ir_bibliography_pids'] = array_values($pids);
            

            drupal_set_message(t('Citation(s) removed successfully.'));
        }
            }
        elseif($citation_action == 1) { //code to export citations
            if($user->uid){
                //code to export from DB
            }
            else {
                //code to export from session
            }
            //code to export citations
            drupal_set_message(t('Citation(s) exported successfully.'));
        }
        else {
            drupal_set_message(t('No action defined for selected citation(s).'));
        }
    }//if(count($selected_citations) > 0)
    else {
        //if no items are selected fire a message
        drupal_set_message(t('No citation(s) were selected.'),'error');
    }
    
}

/**
 * This function......
 *
 */
function ir_bibliography_theme() {
	return array(
		'ir_bibliography_form' => array('arguments' => array('form' => NULL),),
	);
}


/**
 * This function themes and renders the drupal form
 * @return drupal rendered form
 *
 */
function theme_ir_bibliography_form($form) {
    $rows = array();
	
    foreach(element_children($form['table']) as $child) {
        $row_data = $form['table'][$child];
        $row = array();
	
            //$row[] = array('data' => drupal_render($row_data['pid']));
            
            $pid = $row_data['pid'];
            $row[] = array('data' => drupal_render($pid));

            $title = $row_data['title'];
            $row[] = array('data' => drupal_render($title));

            $author = $row_data['author'];
            $row[] = array('data' => drupal_render($author));
            $row[] = "";

            $pid = $row_data['_pid']['#value'];
            $citation_check = $form['citation_check'][$pid];
            $citation_check = drupal_render($citation_check);
            
            $row[] = array('data' => $citation_check);
                      
            $rows[] = $row;
           
	
    }
	// Individual table headers.

	$header = array();
	//theme('table_select_header_cell')"
        
	$header[] = t('PID');
	$header[] = t('Title');
	$header[] = t('Author');
        $header[] = array('data' => drupal_render($form['citation_action']));
        $header[] = theme('table_select_header_cell');

	
        $output = theme_table($header, $rows, $attributes = NULL);
	//$output .= drupal_render($form);
       $output .= drupal_render($form['submit']);
       $output .= drupal_render($form['cancel']);
       //hidden form properties
       $output .= drupal_render($form['form_build_id']);
       $output .= drupal_render($form['form_token']);
       $output .= drupal_render($form['form_id']);
       
	return $output;
}

